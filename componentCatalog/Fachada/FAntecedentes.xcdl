<?xml version="1.0" encoding="UTF-8"?>
<?fuego version="6.5.2" build="100141"?>
<component name="FAntecedentes" description="" versionID="Version 5.7 GA" flags="cloneable replaceable" type="xobject">
	<inherit class="Any" flags="public"/>
	<inherit class="Fuego.Internal.FuegoObject" flags="public hidden"/>
	<inherit class="Fuego.Internal.XODelegate" flags="public delegated hidden"/>
	<objectProperty name="generateBitSets" value="true"/>
	<objectProperty name="generateStubs" value="true"/>
	<objectProperty name="packagePrefix" value="xobject"/>
	<attributes>
		<object type="Servicio.SAntecedentes" name="servicio" flags="hassetter hasgetter public includeincheck" position="1"/>
	</attributes>
	<methods>
		<method name="FAntecedentes" flags="static clientavailable">
			<outputArgument name="return" description="" flags="retval" type="Fachada.FAntecedentes"/>
			<sourceCode language="Java1">this.servicio = new SAntecedentes();</sourceCode>
		</method>
		<method name="deleteValue" flags="public server disableclient">
			<arg name="idSolicitud" description="" flags="in" type="Int"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.deleteValue(idSolicitud : arg.idSolicitud);
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.deleteValue(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getLastValue" flags="public server disableclient">
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getLastValue();
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getLastValue(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getListValues" flags="public server disableclient">
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getListValues(vigencia : false);
	if (respuesta.resultado == OK) {
		Any[] valuesArray = (Any[])respuesta.contenido;	
		Any[] objNegocioArray;
		for (Any valueArray : valuesArray) {
		    Any[String] objArray = (Any[String])valueArray;
		    objNegocioArray[] = this.mapeoArrayToNegocio(objArray : objArray);
		}
    	respuesta.contenido = objNegocioArray;
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getListValues(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getValueForId" description="" flags="public server disableclient">
			<arg name="idSolicitud" description="" flags="in" type="Int"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getValueForId(idSolicitud : arg.idSolicitud);
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getValueForId(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="mapeoArrayToNegocio" flags="clientavailable public">
			<arg name="objArray" description="" flags="in" type="Any[String]"/>
			<outputArgument name="return" description="" flags="retval" type="Negocio.NAntecedentes"/>
			<sourceCode language="Java1">NAntecedentes objNegocio = NAntecedentes();


objNegocio.idSolicitud = (Integer)arg.objArray[&quot;SOL_ID&quot;];
objNegocio.tieneAntecedentes = (Java.Lang.Boolean)arg.objArray[&quot;ANTECEDENTES&quot;];
objNegocio.comentariosAntecedentes = (String)arg.objArray[&quot;COMENTARIOSANTECEDENTES&quot;];
objNegocio.incrementoPrecio = (Java.Lang.Boolean)arg.objArray[&quot;INCREMENTOPRECIO&quot;];
objNegocio.justificacionInPrecio = (String)arg.objArray[&quot;JUSTIFICACIONINCPRECIO&quot;];
objNegocio.incrementoCantidad = (Java.Lang.Boolean)arg.objArray[&quot;INCREMENTOCANTIDAD&quot;];
objNegocio.justificacionInCantidad = (String)arg.objArray[&quot;JUSTIFICACIONINCCANTIDAD&quot;];


return objNegocio;</sourceCode>
		</method>
		<method name="setValue" description="" flags="public server disableclient">
			<arg name="objNegocio" description="" flags="in" type="Negocio.NAntecedentes"/>
			<arg name="solicitudNueva" description="" flags="in" type="Bool"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.setValue(	comentariosAntecedentes : arg.objNegocio.comentariosAntecedentes,
										incrementoPrecio : arg.objNegocio.incrementoPrecio, 
	                       				justificacionInPrecio : arg.objNegocio.justificacionInPrecio,
	                       				incrementoCantidad : arg.objNegocio.incrementoCantidad,
	                       				justificacionInCantidad : arg.objNegocio.justificacionInCantidad,
										tieneAntecedentes : arg.objNegocio.tieneAntecedentes, 
	                       				solId : arg.objNegocio.idSolicitud,
	                       				solicitudNueva : arg.solicitudNueva);
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.setValue(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="verificarErrores" flags="clientavailable public">
			<arg name="solicitud" description="" flags="in" type="Negocio.NSolicitud"/>
			<arg name="rol" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="String[]"/>
			<sourceCode language="Java1">String[] errores = {};

if(!arg.solicitud.pedidoCesta.id in {3,5}){
	if(arg.rol == &quot;TPC - Solicitante SAGI&quot;){
		if(arg.solicitud.antecedentes.tieneAntecedentes){
			if(arg.solicitud.listaAntecedentes == null || arg.solicitud.listaAntecedentes.length() == 0){
				errores[] = &quot;&apos;Lista de Antecedentes&apos; es obligatorio al menos un elemento&quot;;
			}
		}
		if(arg.solicitud.antecedentes.incrementoPrecio){
			if(arg.solicitud.antecedentes.justificacionInPrecio == null || arg.solicitud.antecedentes.justificacionInPrecio == &quot;&quot;){
				errores[] = &quot;&apos;Justificacion Incremento en Precio&apos; es obligatorio.&quot;;
			}
		}
		if(arg.solicitud.antecedentes.incrementoCantidad){
			if(arg.solicitud.antecedentes.justificacionInCantidad == null || arg.solicitud.antecedentes.justificacionInCantidad == &quot;&quot;){
				errores[] = &quot;&apos;Justificacion Incremento en Cantidad&apos; es obligatorio.&quot;;
			}
		}
	}
	else if(arg.rol == &quot;TPC - Gestor Enlace&quot;){
		if(arg.solicitud.antecedentes.tieneAntecedentes == null){
			errores[] = &quot;&apos;Tiene Antecedentes&apos; es obligatorio&quot;;
		}
		else if(arg.solicitud.antecedentes.tieneAntecedentes){
			if(arg.solicitud.listaAntecedentes == null || arg.solicitud.listaAntecedentes.length() == 0){
				errores[] = &quot;&apos;Lista de Antecedentes&apos; es obligatorio al menos un elemento&quot;;
			}
			if(arg.solicitud.antecedentes.comentariosAntecedentes == null || arg.solicitud.antecedentes.comentariosAntecedentes == &quot;&quot;){
				errores[] = &quot;&apos;Comentarios a Antecedentes&apos; es obligatorio&quot;;
			}
		}

		if(arg.solicitud.antecedentes.incrementoPrecio){
			if(arg.solicitud.antecedentes.justificacionInPrecio == null || arg.solicitud.antecedentes.justificacionInPrecio == &quot;&quot;){
				errores[] = &quot;&apos;Justificacion Incremento en Precio&apos; es obligatorio.&quot;;
			}
		}
		if(arg.solicitud.antecedentes.incrementoCantidad){
			if(arg.solicitud.antecedentes.justificacionInCantidad == null || arg.solicitud.antecedentes.justificacionInCantidad == &quot;&quot;){
				errores[] = &quot;&apos;Justificacion Incremento en Cantidad&apos; es obligatorio.&quot;;
			}
		}
	}
}

return errores;</sourceCode>
		</method>
	</methods>
</component>
