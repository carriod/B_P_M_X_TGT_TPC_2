<?xml version="1.0" encoding="UTF-8"?>
<?fuego version="6.5.2" build="100141"?>
<component name="FAsignacionMasivaAnalistas" description="" versionID="Version 5.7 GA" flags="cloneable replaceable" type="xobject">
	<inherit class="Any" flags="public"/>
	<inherit class="Fuego.Internal.FuegoObject" flags="public hidden"/>
	<inherit class="Fuego.Internal.XODelegate" flags="public delegated hidden"/>
	<objectProperty name="generateBitSets" value="true"/>
	<objectProperty name="generateStubs" value="true"/>
	<objectProperty name="packagePrefix" value="xobject"/>
	<attributes>
		<object type="Servicio.SAsignacionMasivaAnalistas" name="servicio" flags="hassetter hasgetter public includeincheck" position="1"/>
	</attributes>
	<methods>
		<method name="FAsignacionMasivaAnalistas" flags="static clientavailable">
			<outputArgument name="return" description="" flags="retval" type="Fachada.FAsignacionMasivaAnalistas"/>
			<sourceCode language="Java1">this.servicio = new SAsignacionMasivaAnalistas();</sourceCode>
		</method>
		<method name="getValues" flags="public server disableclient">
			<arg name="id" description="" flags="in" type="Int"/>
			<arg name="nroCesta" description="" flags="in" type="Int"/>
			<arg name="fechaEnvioDesde" description="" flags="in" type="Time"/>
			<arg name="fechaEnvioHasta" description="" flags="in" type="Time"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getValues(id : arg.id, nroCesta : arg.nroCesta, fechaEnvioDesde : arg.fechaEnvioDesde, fechaEnvioHasta : arg.fechaEnvioHasta);
	
	if (respuesta.resultado == OK) {
		Any[] valuesArray = (Any[])respuesta.contenido;	
		NAsignacionMasivaAnalistas[] objNegocioArray;
		
		for (Any valueArray : valuesArray) {
		    Any[String] objArray = (Any[String])valueArray;
		    objNegocioArray[] = this.mapeoArrayToNegocio(objArray : objArray);
		}
		
    	respuesta.contenido = objNegocioArray;
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getListValues(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="mapeoArrayToNegocio" flags="clientavailable public">
			<arg name="objArray" description="" flags="in" type="Any[String]"/>
			<outputArgument name="return" description="" flags="retval" type="Negocio.NAsignacionMasivaAnalistas"/>
			<sourceCode language="Java1">NAsignacionMasivaAnalistas objNegocio = NAsignacionMasivaAnalistas();

objNegocio.idSolicitud = (Integer)arg.objArray[&quot;ID&quot;];
objNegocio.nroCesta = (Integer)arg.objArray[&quot;NROCESTA&quot;];
objNegocio.areaSolicitante = (String)arg.objArray[&quot;AREASOLICITANTE&quot;];
objNegocio.descripcionNecesidad = (String)arg.objArray[&quot;DESCRIPCIONNECESIDAD&quot;];
objNegocio.fechaEnvio = (Time)arg.objArray[&quot;FECHAENVIOANALISIS&quot;];

return objNegocio;</sourceCode>
		</method>
		<method name="verificarErrores" flags="clientavailable public">
			<arg name="solicitud" description="" flags="in" type="Negocio.NSolicitud"/>
			<arg name="rol" description="" flags="in" type="String"/>
			<arg name="actividad" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="String[]"/>
			<sourceCode language="Java1">String[] errores = {};

if(actividad == &quot;SCGAsignarParticipantesSAGI&quot; || actividad == &quot;ACGAsignarParticipantesSAGI&quot; ||
	actividad == &quot;GCOAsignarParticipantesSAGI&quot; || actividad == &quot;JCOAsignarParticipantesSAGI&quot;)
{


	if(rol == &quot;TPC - Supervisor CdG&quot;){
		if (solicitud.asignacionParticipante.analista == null || solicitud.asignacionParticipante.analista == &quot;&quot;){
			errores[] = &quot;&apos;Analista&apos; es obligatorio&quot;;
		}
	}else if(rol == &quot;TPC - Analista CdG&quot;){
		if (solicitud.asignacionParticipante.controller == null || solicitud.asignacionParticipante.controller == &quot;&quot;){
			errores[] = &quot;&apos;Controller&apos; es obligatorio&quot;;
		}
	}else if (rol == &quot;TPC - Gerente Compras&quot;){
		if (solicitud.asignacionParticipante.jefeCompras == null || solicitud.asignacionParticipante.jefeCompras == &quot;&quot;){
			errores[] = &quot;&apos;Jefe de Compras&apos; es obligatorio&quot;;
		}
	}else if (rol == &quot;TPC - Jefe Compras&quot;){
		if (solicitud.asignacionParticipante.comprador == null || solicitud.asignacionParticipante.comprador == &quot;&quot;){
			errores[] = &quot;&apos;Comprador&apos; es obligatorio&quot;;
		}
	}
	
}else{

	if(rol == &quot;TPC - Supervisor CdG&quot;){
		if (solicitud.asignacionParticipante.analista == null || solicitud.asignacionParticipante.analista == &quot;&quot;){
			errores[] = &quot;&apos;Analista&apos; es obligatorio&quot;;
		}
	}else if(rol == &quot;TPC - Analista CdG&quot;){
		if (solicitud.asignacionParticipante.controller == null || solicitud.asignacionParticipante.controller == &quot;&quot;){
			errores[] = &quot;&apos;Controller&apos; es obligatorio&quot;;
		}
	}else if (rol == &quot;TPC - Gerente Compras&quot;){
		if (solicitud.asignacionParticipante.jefeCompras == null || solicitud.asignacionParticipante.jefeCompras == &quot;&quot;){
			errores[] = &quot;&apos;Jefe de Compras&apos; es obligatorio&quot;;
		}
	}else if (rol == &quot;TPC - Jefe Compras&quot;){
		if (solicitud.asignacionParticipante.comprador == null || solicitud.asignacionParticipante.comprador == &quot;&quot;){
			errores[] = &quot;&apos;Comprador&apos; es obligatorio&quot;;
		}
	}else if (rol == &quot;TPC - Administrador SAGI&quot;){
		if (solicitud.gestorEnlace == null || solicitud.gestorEnlace == &quot;&quot;){
			errores[] = &quot;&apos;Gestor Enlace&apos; es obligatorio&quot;;
		}
		if (solicitud.gestorSolicitante == null || solicitud.gestorSolicitante == &quot;&quot;){
			errores[] = &quot;&apos;Solicitante&apos; es obligatorio&quot;; 
		}
		if (solicitud.emailEnlace == null || solicitud.emailEnlace == &quot;&quot;){
			errores[] = &quot;&apos;Email Gestor Enlace&apos; es obligatorio&quot;; 
		}
		if (solicitud.emailSolicitante == null || solicitud.emailSolicitante == &quot;&quot;){
			errores[] = &quot;&apos;Email Solicitante&apos; es obligatorio&quot;; 
		}
	}
}

return errores;</sourceCode>
		</method>
	</methods>
</component>
