<?xml version="1.0" encoding="UTF-8"?>
<?fuego version="6.5.2" build="101122"?>
<component name="FGerencia2" description="" versionID="Version 5.7 GA" flags="cloneable replaceable" type="xobject">
	<inherit class="Any" flags="public"/>
	<inherit class="Fuego.Internal.FuegoObject" flags="public hidden"/>
	<inherit class="Fuego.Internal.XODelegate" flags="public delegated hidden"/>
	<objectProperty name="generateBitSets" value="true"/>
	<objectProperty name="generateStubs" value="true"/>
	<objectProperty name="packagePrefix" value="xobject"/>
	<attributes>
		<object type="Servicio2.SGerencia2" name="servicio" flags="hassetter hasgetter public includeincheck" position="1"/>
	</attributes>
	<methods>
		<method name="FGerencia2" flags="static clientavailable">
			<outputArgument name="return" description="" flags="retval" type="Fachada2.FGerencia2"/>
			<sourceCode language="Java1">this.servicio = new SGerencia2();</sourceCode>
		</method>
		<method name="deleteValue" flags="public server disableclient">
			<arg name="id" description="" flags="in" type="Int"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.deleteValue(id : arg.id);
	if (respuesta.resultado == OK) { 
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.deleteValue(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="esGerenteBPM" flags="public server disableclient">
			<arg name="usuarioGerente" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="Bool"/>
			<sourceCode language="Java1">try{
	Fuego.Lib.Participant participant = Participant.find(name : usuarioGerente);
	
	if(participant != null){
		
		for(int i = 0; i &lt; participant.roles.length(); i++){
			
			if(participant.roles[i].name == &quot;TPC - Gerente Compras&quot;){
				return true;			
			}

		}
	
	}
	
	return false;

	
}
catch(Java.Lang.Exception ee){
	
	return false;
}
</sourceCode>
		</method>
		<method name="findParticipant" flags="public server disableclient">
			<arg name="participante" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="String"/>
			<sourceCode language="Java1">String nombre=&quot;&quot;;

Fuego.Lib.Participant participant = Participant.find(name : arg.participante);

if(participant.lastName!=null &amp;&amp; !participant.lastName.equals(&quot;&quot;) 
&amp;&amp; participant.firstName!=null &amp;&amp; !participant.firstName.equals(&quot;&quot;)){
	nombre=participant.lastName+&quot;, &quot;+participant.firstName;
}


return nombre;</sourceCode>
		</method>
		<method name="getLastValue" flags="public server disableclient">
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getLastValue();
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);

    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getLastValue(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getListValues" flags="public server disableclient">
			<arg name="vigencia" description="" flags="in" type="Bool"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getListValues(vigencia : arg.vigencia);
	if (respuesta.resultado == OK) {
		Any[] valuesArray = (Any[])respuesta.contenido;	
		Any[] objNegocioArray;
		for (Any valueArray : valuesArray) {
		    Any[String] objArray = (Any[String])valueArray;
		    objNegocioArray[] = this.mapeoArrayToNegocio(objArray : objArray);
		}
    	respuesta.contenido = objNegocioArray;
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getListValues(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getListValuesCombo" flags="clientavailable public">
			<arg name="vigencia" description="" flags="in" type="Bool"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getListValues(vigencia : arg.vigencia);
	if (respuesta.resultado == OK) {
		Any[] valuesArray = (Any[])respuesta.contenido;	
		String[Integer] comboItem;
		for (Any valueArray : valuesArray) {
		    Any[String] objArray = (Any[String])valueArray;
		    String gerencia = (String)objArray[&quot;DESCRIPCION&quot;];
			comboItem[(Integer)objArray[&quot;ID&quot;]] = (gerencia!=null?gerencia:&quot;&quot;);
		}
    	respuesta.contenido = comboItem;
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getListValues(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;
</sourceCode>
		</method>
		<method name="getListValuesForCodigo" flags="public server disableclient">
			<arg name="codigo" description="" flags="in" type="String"/>
			<arg name="caseSensitive" description="" flags="in" type="Bool"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getListValuesForCodigo(codigo : arg.codigo, caseSensitive : arg.caseSensitive);
	if (respuesta.resultado == OK) {
		Any[] valuesArray = (Any[])respuesta.contenido;	
		Any[] objNegocioArray;
		for (Any valueArray : valuesArray) {
		    Any[String] objArray = (Any[String])valueArray;
		    objNegocioArray[] = this.mapeoArrayToNegocio(objArray : objArray);
		}
    	respuesta.contenido = objNegocioArray;
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getListValues(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getValueForGerente" description="" flags="public server disableclient">
			<arg name="gerente" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getValueForGerente(gerente : arg.gerente);
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getValueForId(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getValueForId" flags="public server disableclient">
			<arg name="id" description="" flags="in" type="Int"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getValueForId(id : arg.id);
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getValueForCodigo(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getValueForUserId" flags="public server disableclient">
			<arg name="userId" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getValueForUserId(userId : arg.userId);
	if (respuesta.resultado == OK) {
		Any[String] objArray = (Any[String])respuesta.contenido;
    	respuesta.contenido = this.mapeoArrayToNegocio(objArray : objArray);
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getValueForCodigo(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="getValuesForFiltros" flags="clientavailable public">
			<arg name="descripcion" description="" flags="in" type="String"/>
			<arg name="gerente" description="" flags="in" type="String"/>
			<arg name="usuarioGerente" description="" flags="in" type="String"/>
			<arg name="descripcionCorta" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try {
	respuesta = this.servicio.getValuesForFiltros(descripcion : arg.descripcion, gerente : arg.gerente, usuarioGerente : arg.usuarioGerente, 
	                                  descripcionCorta : arg.descripcionCorta);
	                                  
	if (respuesta.resultado == OK) {
		Any[] valuesArray = (Any[])respuesta.contenido;	
		Any[] objNegocioArray;
		for (Any valueArray : valuesArray) {
		    Any[String] objArray = (Any[String])valueArray;
		    objNegocioArray[] = this.mapeoArrayToNegocio(objArray : objArray);
		}
    	respuesta.contenido = objNegocioArray;
    }
}
catch (Java.Lang.Exception e) {
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.getListValues(): Error &quot; + e.message;
    Utiles.Logger.logException(exception : e);
}
return respuesta;</sourceCode>
		</method>
		<method name="mapeoArrayToNegocio" flags="clientavailable public">
			<arg name="objArray" description="" flags="in" type="Any[String]"/>
			<outputArgument name="return" description="" flags="retval" type="Negocio2.NGerencia2"/>
			<sourceCode language="Java1">Negocio2.NGerencia2 objNegocio = Negocio2.NGerencia2();

objNegocio.id = (Integer)arg.objArray[&quot;ID&quot;];
objNegocio.descripcionCorta = (String)arg.objArray[&quot;DESCRIPCIONCORTA&quot;];
objNegocio.descripcion = (String)arg.objArray[&quot;DESCRIPCION&quot;];
objNegocio.gerente = (String)arg.objArray[&quot;GERENTE&quot;];
objNegocio.usuarioGerente = (String)arg.objArray[&quot;USUARIOGERENTE&quot;];
objNegocio.lineaProducto.id = (Integer)arg.objArray[&quot;LPR_ID&quot;];
objNegocio.usuarioAlta = (String)arg.objArray[&quot;USUARIOALTA&quot;];
objNegocio.fechaAlta = (Time)arg.objArray[&quot;FECHAALTA&quot;];
objNegocio.usuarioModificacion = (String)arg.objArray[&quot;USUARIOMODIFICACION&quot;];
objNegocio.fechaModificacion = (Time)arg.objArray[&quot;FECHAMODIFICACION&quot;];
objNegocio.vigencia = (Bool)arg.objArray[&quot;VIGENCIA&quot;];

return objNegocio;</sourceCode>
		</method>
		<method name="setValue" description="" flags="public server disableclient">
			<arg name="objNegocio" description="" flags="in" type="Negocio2.NGerencia2"/>
			<outputArgument name="return" description="" flags="retval" type="Utiles.Respuesta"/>
			<sourceCode language="Java1">Respuesta respuesta;

try{
	respuesta = this.servicio.setValue(id: arg.objNegocio.id,
									   descripcionCorta: arg.objNegocio.descripcionCorta,
									   descripcion: arg.objNegocio.descripcion,
	      							   gerente: arg.objNegocio.gerente,
	  								   lprId: arg.objNegocio.lineaProducto.id,
									   usuarioAlta: arg.objNegocio.usuarioAlta, 
	                       			   usuarioModificacion: arg.objNegocio.usuarioModificacion,
	                       			   vigencia: arg.objNegocio.vigencia, 
	                       			   usuarioGerente : arg.objNegocio.usuarioGerente);
}
catch(Java.Lang.Exception e){
    respuesta.resultado = DBERROR;
    respuesta.contenido = &quot;fachada.setValue(): Error &quot; + e.message;
    Utiles.Logger.logException(exception: e);
}
return respuesta;</sourceCode>
		</method>
	</methods>
</component>
